import streamlit as st
import re
from server.src.tools.auto_pos_tag_tool import predict  # H√†m predict t·ª´ m√¥ h√¨nh CRF

# H√†m t√¥ m√†u theo entity
def highlight_entities(text, labels):
    """
    T√¥ m√†u c√°c th·ª±c th·ªÉ trong vƒÉn b·∫£n theo nh√£n d·ª± ƒëo√°n t·ª´ CRF.
    
    text: C√¢u ƒë·∫ßu v√†o (chu·ªói)
    labels: Nh√£n CRF ƒë·∫ßu ra (list c√°c nh√£n O, B-*, I-*)
    """
    words = text.split()
    highlighted_text = ""

    entity_colors = {
        "PERSON": "#FFD700",  # M√†u v√†ng
        "ORGANIZATION": "#FF6347",     # M√†u ƒë·ªè cam
        "LOCATION": "#90EE90",     # M√†u xanh l√° nh·∫°t
        "MISCELLANEOUS" : "#0000FF" # M√†u xanh d∆∞∆°ng
    }

    entity = ""
    entity_type = None

    for word, label in zip(words, labels):
        if label.startswith("B-"):
            if entity:  
                highlighted_text += f'<span style="background-color: {entity_colors.get(entity_type, "#ADD8E6")}; padding: 2px 5px; border-radius: 3px;">{entity}</span> '
            entity = word
            entity_type = label.split("-")[1]
        elif label.startswith("I-") and entity:
            entity += " " + word
        else:
            if entity:
                highlighted_text += f'<span style="background-color: {entity_colors.get(entity_type, "#ADD8E6")}; padding: 2px 5px; border-radius: 3px;">{entity}</span> '
                entity = ""
            highlighted_text += word + " "

    # Th√™m entity cu·ªëi c√πng n·∫øu c√≥
    if entity:
        highlighted_text += f'<span style="background-color: {entity_colors.get(entity_type, "#ADD8E6")}; padding: 2px 5px; border-radius: 3px;">{entity}</span> '

    return highlighted_text.strip()


# Giao di·ªán Streamlit
st.title("üìù Tr·ª±c quan h√≥a NER v·ªõi CRF")

# √î nh·∫≠p vƒÉn b·∫£n t·ª´ ng∆∞·ªùi d√πng
user_input = st.text_area("Nh·∫≠p vƒÉn b·∫£n c·∫ßn nh·∫≠n di·ªán th·ª±c th·ªÉ:")

if st.button("D·ª± ƒëo√°n"):
    if user_input:
        sent_list, predicted_labels_list = predict(user_input)  # Nh·∫≠n danh s√°ch c√¢u v√† nh√£n

        if len(sent_list) == len(predicted_labels_list):  # Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
            for sent, predicted_labels in zip(sent_list, predicted_labels_list):
                words = sent.split()
                if len(words) == len(predicted_labels):  # Ki·ªÉm tra s·ªë t·ª´ kh·ªõp nh√£n
                    styled_text = highlight_entities(sent, predicted_labels)
                    st.markdown(f'<p style="font-size:18px;">{styled_text}</p>', unsafe_allow_html=True)
                else:
                    st.error(f"‚ö†Ô∏è L·ªói: S·ªë l∆∞·ª£ng t·ª´ trong c√¢u `{sent}` kh√¥ng kh·ªõp v·ªõi s·ªë l∆∞·ª£ng nh√£n d·ª± ƒëo√°n!")
        else:
            st.error("‚ö†Ô∏è S·ªë l∆∞·ª£ng c√¢u v√† nh√£n d·ª± ƒëo√°n kh√¥ng kh·ªõp!")
    else:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ nh·∫≠n di·ªán th·ª±c th·ªÉ.")
